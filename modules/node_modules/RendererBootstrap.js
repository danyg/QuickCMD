/**
* @Overview
*
* @Author: Daniel Goberitz
* @Date:               2016-08-20 16:29:48
* @Last Modified time: 2016-08-24 18:35:49
*/

'use strict';
require('modulesLoader');
const path = require('path');

class RendererBootstrap {
	constructor(context, window) {
		this.context = context;
		this.window = window;
		this.document = window.document;
		this._overwriteModulePaths();

		this.window.context = this;
		this.loadBases();
	}

	_overwriteModulePaths(){
		const Module = require('module').Module;
		var origNodeModulePaths = Module._nodeModulePaths;
		var me = this;

		Module._nodeModulePaths = function(from) {
			var paths = origNodeModulePaths.apply(this, arguments);
			if(from.indexOf('rendererjs') !== -1 || from.indexOf('gui' + path.sep) !== -1) {
				paths.unshift(me.getJSBasePath());
				paths.unshift(me.getGUIBasePath());
			}

			return paths;
		};
		module.parent.paths.unshift(me.getJSBasePath());
		module.parent.paths.unshift(this.getGUIBasePath());
	}

	loadBases() {
		this.insertLinkTag(this.getGUIBasePath () + '/css/global.css');
		this.insertLinkTag(this.getCSSBasePath() + '/' + this.context.moduleName + 'Styles.css');
		this.insertScriptTag(this.getJSBasePath() + '/' + this.context.moduleName + 'Renderer.js');
	}

	insertScriptTag(href) {
		var src = this.document.createElement('script');
		src.type = 'text/javascript';
		src.src = href;
		this.document.head.appendChild(src);
	}

	insertLinkTag(href) {
		var link = this.document.createElement('link');
		link.rel = 'stylesheet';
		link.type = 'text/css';
		link.href = href;
		this.document.head.appendChild(link);
	}

	getModuleName () {
		return path.resolve(this.context.moduleName);
	}
	getModulePath () {
		return path.resolve(this.context.modulePath);
	}
	getTemplatePath () {
		return path.resolve(this.context.templatePath);
	}
	getBasePath () {
		return path.resolve(this.context.basePath);
	}
	getJSBasePath () {
		return path.resolve(this.context.modulePath + '/rendererjs');
	}
	getCSSBasePath () {
		return path.resolve(this.context.modulePath + '/css');
	}
	getGUIBasePath () {
		return path.resolve(this.context.basePath + '/gui');
	}
}

RendererBootstrap.bootstrap = function(window) {
	var context = JSON.parse(decodeURI(window.location.search.substring(1)));
	include.setBasePath(context.basePath);
	window.include = include;
	window.gui = new RendererBootstrap(context, window);
}

module.exports = RendererBootstrap;